


/**
 * Формирование СМС чаще всего состоит из 2-4 итераций (зависит от параметров):
 * 1. Формирование первых СМС с фиктивным суффиксом вида 1/1, 2/2, 3/3 и т.д.
 * Суффикс здесь необходим только для уменьшения дополнительных вычисчлений (итераций)
 * 2. После первой итерации мы имеем примерный размер массива (m1).
 * Составляем новые СМС вида 1/m1, 2/m1, 3/m1 и т.д.
 * Так как длина m1 чаще всего будет отличаться от длины фиктивного суффикса,
 * число строк снова меняется. Получаем новое количество СМС (m2)
 * 3. Длина строки суффикса перестает расти (т.к. увеличение кол-ва смс в 10 и более раз почти невозможно).
 * Соответственно, количество смс так же перестает расти.
 * В этой итерации, как правило, находится конечное число СМС (m3).
 * 4. Формируется такое же количество СМС (m3), но с правильным суффиксом.

 * В случае очень большого размера входной строки,
 * итерации будут происходить до момента, пока количетство СМС не перестанет меняться

 * @param str исходное сообщение, которое необходимо разбить на СМС
 * @param maxSMSLength максимальная длина СМС
 * @see maxSMSLength по условию НЕ может быть меньше длины максимального слова + суффикс
 * @see str гарантируется, что строку можно по всем правилам разбить на отдельные СМС
 *
 * @return массив строк (СМС), сформированный по правилам:
 * 1) Текст разбивается только по пробелам (без переноса слов и т.д.)
 * 2) Если размер массива > 1, то к каждому СМС добавляется суффикс (1/3, 2/3, 3/3)
 * 3) Длина СМС + суффикс должна быть < [maxSMSLength]
 * 4) Необходимо минимизировать количество СМС (элементов массива)
 *
 * @author @qveex
 */
fun parseSMS(str: String, maxSMSLength: Int): Array<String> {

    val words = str.split(' ')
    val messages = ArrayList<String>()

    var curSize = -1
    var lastSize = 0

    while (curSize != lastSize) {

        messages.clear()
        messages.add("")

        var lineCount = 0

        words.forEach { word ->

            val possibleMsg = (messages[lineCount] + word)
            val suff = if (curSize == -1) "${lineCount + 1}/${lineCount + 1}" else "${lineCount + 1}/${curSize + 1}"

            if ((possibleMsg + suff).length + 1 > maxSMSLength) {
                if (!(word == words.last() && messages.size == 1 && possibleMsg.length <= maxSMSLength)) {
                    messages[lineCount++] += suff
                    messages.add("")
                }
            }

            messages[lineCount] += "$word "

            if (word == words.last() && messages.size > 1) {
                val lastSuff = if (curSize == -1) "${lineCount + 1}/${lineCount + 1}" else "${lineCount + 1}/${curSize + 1}"
                messages[lineCount] += lastSuff
            }
        }
        messages[messages.indices.last] = messages.last().trim()

        lastSize = curSize
        curSize = messages.indices.last
    }

    // просто для справки
    isValid(messages, maxSMSLength)

    return messages.toArray(Array(messages.size) { messages[it] })
}


/**
 * Автор считает, что алгоритм считает все верно :)

 * Функция выведет подсказку о примерной предпочитаемой длине
 *
 * @throws IllegalArgumentException если:
 * - В тексте есть слово, которое превышает [maxSMSLength]
 * - Если [maxSMSLength] была указана длиной максимального слова, то не помещается суффикс
 * - Если [maxSMSLength] была указана с запасом, то суффикс оказался все равно больше
 */
fun isValid(messages: ArrayList<String>, maxSMSLength: Int) {

    var maxSize = 0
    var incorrectLine = ""
    var isValid = true

    messages.forEach {
        if (it.length > maxSMSLength && it.length > maxSize) {
            maxSize = it.length
            isValid = false
            incorrectLine = it
        }
    }

    if (!isValid) {
        throw IllegalArgumentException(
            "Входные параметры некорректны!!!\n" +
                    "Строка с ошибкой: \"$incorrectLine\"" +
                    "\nЭту строку невозможно уменьшить, поскольку она состоит из одного слова и суффикса" +
                    "\nmaxSMSLength = $maxSMSLength" +
                    "\nlineLength = $maxSize" +
                    "\nРекомендуемое значение maxSMSLength = ~$maxSize\n"

        )
    }

}




fun main() {

    parseSMS("раз два три", 7).forEach { println(it) }.also { println() }
    parseSMS("Завтра я полечу в Португалию на самолете", 14).forEach { println(it) }.also { println() }
    parseSMS("раздва дватри тричет", 10).forEach { println(it) }.also { println() }
    parseSMS("раз два три", 9).forEach { println(it) }.also { println() }
    parseSMS("раз два три", 11).forEach { println(it) }.also { println() }
    parseSMS("Сейчас я попытаюсь придумать интересные предложения для тестирования", 16).forEach { println(it) }.also { println() }
    parseSMS("Два раза в день я хожу на улицу, чтобы подышать свежим морозным воздухом, а сразу после этого я обычно наливаю себе крепкий армотный чай с жасмином, который быстро согревает и создает в душе уют и покой.", 15).forEach { println(it) }.also { println() }
    parseSMS("Два раза в день я хожу на улицу, чтобы подышать свежим морозным воздухом, а сразу после этого я обычно наливаю себе крепкий армотный чай с жасмином, который быстро согревает и создает в душе уют и покой.", 22).forEach { println(it) }.also { println() }
    parseSMS("Два раза в день я хожу на улицу, чтобы подышать свежим морозным воздухом, а сразу после этого я обычно наливаю себе крепкий армотный чай с жасмином, который быстро согревает и создает в душе уют и покой.", 64).forEach { println(it) }.also { println() }
    parseSMS("Сегодня шёл дождь", 255).forEach { println(it) }.also { println() }
    parseSMS("Сообщение", 9).forEach { println(it) }.also { println() }
    parseSMS("Я надеюсь, алгоритм работает верно, ведь создать тестовые данные для его проверки достаточно трудно, и мне приходится ограничиваться вот этим", 20).forEach { println(it) }.also { println() }
    parseSMS("Четыре года я ждал ее у озера, но она так и не вернулась", 13).forEach { println(it) }.also { println() }
    parseSMS("Александр смотрел на то, как ловко тот парень поднимал невероятно большой вес от своей груди, и мечтал, что когда-нибудь он достигнет таких же высот", 18).forEach { println(it) }.also { println() }
    parseSMS("Больше девяти тысяч солдат шли прямо на нас, пока капитан нервно пытался поправить свою фуражку", 15).forEach { println(it) }.also { println() }
    parseSMS("Вода, Огонь, Земля, Воздух. Когда-то давно четыре народа жили в мире. Но все изменилось, когда народ Огня развязал войну. Только Аватар, властелин всех четырех стихий, мог остановить захватчиков.", 18).forEach { println(it) }.also { println() }
    parseSMS("Вода, Огонь, Земля, Воздух. Когда-то давно четыре народа жили в мире. Но все изменилось, когда народ Огня развязал войну. Только Аватар, властелин всех четырех стихий, мог остановить захватчиков.", 195).forEach { println(it) }.also { println() }
    parseSMS("Вода, Огонь, Земля, Воздух. Когда-то давно четыре народа жили в мире. Но все изменилось, когда народ Огня развязал войну. Только Аватар, властелин всех четырех стихий, мог остановить захватчиков.", 194).forEach { println(it) }.also { println() }
    parseSMS("Вода, Огонь, Земля, Воздух. Когда-то давно четыре народа жили в мире. Но все изменилось, когда народ Огня развязал войну. Только Аватар, властелин всех четырех стихий, мог остановить захватчиков.", 196).forEach { println(it) }.also { println() }
    parseSMS("Вода, Огонь, Земля, Воздух. Когда-то давно четыре народа жили в мире. Но все изменилось, когда народ Огня развязал войну. Только Аватар, властелин всех четырех стихий, мог остановить захватчиков.", 32).forEach { println(it) }.also { println() }

    parseSMS("В той живописной местности веселой Англии, которая орошается рекою Дон, в давние времена простирались обширные леса, покрывавшие большую часть красивейших холмов и долин, лежащих между Шеффилдом и Донкастером.\n" +
            "\n" +
            "Остатки этих огромных лесов и поныне видны вокруг дворянских замков Уэнтворт, Уорнклиф-парк и близ Ротерхема. По преданию, здесь некогда обитал сказочный уонтлейский дракон; здесь происходили ожесточенные битвы во время междоусобных войн Белой и Алой Розы; и здесь же в старину собирались ватаги тех отважных разбойников, подвиги и деяния которых прославлены в народных песнях.\n" +
            "\n" +
            "Таково главное место действия нашей повести, по времени же - описываемые в ней события относятся к концу царствования Ричарда I, когда возвращение короля из долгого плена казалось желанным, но уже невозможным событием отчаявшимся подданным, которые подвергались бесконечным притеснениям знати. Феодалы, получившие непомерную власть в царствование Стефана, но вынужденные подчиняться королевской власти благоразумного Генриха II, теперь снова бесчинствовали, как в прежние времена; пренебрегая слабыми попытками английского государственного совета ограничить их произвол, они укрепляли свои замки, увеличивали число вассалов, принуждали к повиновению и вассальной зависимости всю округу; каждый феодал стремился собрать и возглавить такое войско, которое дало бы ему возможность стать влиятельным лицом в приближающихся государственных потрясениях.\n" +
            "\n" +
            "Чрезвычайно непрочным стало в ту пору положение мелкопоместных дворян, или, как их тогда называли, Франклинов, которые, согласно букве и духу английских законов, должны были бы сохранять свою независимость от тирании крупных феодалов. Франклины могли обеспечить себе на некоторое время спокойное существование, если они, как это большей частью и случалось, прибегали к покровительству одного из влиятельных вельмож их округи, или входили в его свиту, или же обязывались по соглашениям о взаимной помощи и защите поддерживать феодала в его военных предприятиях; но в этом случае они должны были жертвовать своей свободой, которая так дорога сердцу каждого истого англичанина, и подвергались опасности оказаться вовлеченными в любую опрометчивую затею их честолюбивого покровителя. С другой стороны, знатные бароны, располагавшие могущественными и разнообразными средствами притеснения и угнетения, всегда находили предлог для того, чтобы травить, преследовать и довести до полного разорения любого из своих менее сильных соседей, который попытался бы не признать их власти и жить самостоятельно, думая, что его безопасность обеспечена лояльностью и строгим подчинением законам страны.\n" +
            "\n" +
            "Завоевание Англии норманским герцогом Вильгельмом значительно усилило тиранию феодалов и углубило страдания низших сословий. Четыре поколения не смогли смешать воедино враждебную кровь норманнов и англосаксов или примирить общностью языка и взаимными интересами ненавистные друг другу народности, из которых одна все еще упивалась победой, а другая страдала от последствий своего поражения. После битвы при Гастингсе власть полностью перешла в руки норманских дворян, которые отнюдь не отличались умеренностью. Почти все без исключения саксонские принцы и саксонская знать были либо истреблены, либо лишены своих владений; невелико было и число мелких саксонских собственников, за которыми сохранились земли их отцов. Короли непрестанно стремились законными и противозаконными мерами ослабить ту часть населения, которая испытывала врожденную ненависть к завоевателям. Все монархи норманского происхождения оказывали явное предпочтение своим соплеменникам; охотничьи законы и другие предписания, отсутствовавшие в более мягком и более либеральном саксонском уложении, легли на плечи побежденных, еще увеличивая тяжесть и без того непосильного феодального гнета.\n" +
            "\n" +
            "При дворе и в замках знатнейших вельмож, старавшихся ввести у себя великолепие придворного обихода, говорили исключительно по-нормано-французски; на том же языке велось судопроизводство во всех местах, где отправлялось правосудие. Словом, французский язык был языком знати, рыцарства и даже правосудия, тогда как несравненно более мужественная и выразительная англосаксонская речь была предоставлена крестьянам и дворовым людям, не знавшим иного языка.\n" +
            "\n" +
            "Однако необходимость общения между землевладельцами и порабощенным народом, который обрабатывал их землю, послужила основанием для постепенного образования наречия из смеси французского языка с англосаксонским, говоря на котором, они могли понимать друг друга. Так мало-помалу возник английский язык настоящего времени, заключающий в себе счастливое смешение языка победителей с наречием побежденных и с тех пор столь обогатившийся заимствованиями из классических и так называемых южно-европейских языков.", 64).forEach { println(it) }.also { println() }

}